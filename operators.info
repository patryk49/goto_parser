KEYWORDS:
if, else, switch, for                                    conditional flow statements
break, continue, goto                                    control flow statements
do, try                                                  result giving scope, execute if possible
proc, struct, enum,                                      data type specifiers

DIRECTIVES:
load                                                     import source code file
at                                                       specify place

BUILTIN VARIABLES:
Class, Null, True, False                                 class of class, null pointer, true value, false value

INFIX OPERATORS BY PRECEDENCE:
=   <>= +=  -=  +%= -%= *=  /=  *%= /%= %=  **=          (assigns)
|=  |=  &=  ^=  <<= >>=                                  (assigns)
|>                                                       pipe output
||  !|                                                   logic or, logic nor
&&  !&                                                   logic and, logic nand
==  !=  <   >   <=  >=                                   equal, not equal, less, greater, less or equal, greater or equal
@=  !@=                                                  is in, is not in
<>                                                       concatenate
%                                                        modulo
+   -   +%  -%  +&  -&                                   add, subtract, modular add, modular subtract
*   /   *%  /%  *&  /&                                   multiply, divide, modular multiply, modular divide
><                                                       cross product
**                                                       power, 
|   ^|                                                   bit or, bit nor
&   ^&                                                   bit and, bit nand
^                                                        bit xor
<<  >>                                                   left shift, right shift
~   ~%~                                                  cast, reinterpret

PREFIX OPERATORS:
*          ^                                             address of/pointer, const pointer 
[]         <>                                            span, const span 
[[stride]] <[stride]>                                    span with stride, const span with stride
[size]                                                   fixed array
[..]                                                     buffer
+          -                                             plus, minus
!          ^                                             logic not, bit not
@                                                        broadcast
!* !^ ![] !<> ![[stride]] !<[stride]>                    simmilar to above, but may alias
?^ ?<> ?<[stride]>                                       simmilar to above, but it keeps track of const qualifier


POSTFIX OPERATORS:
.field     .[index]                                      field access, indexed field access, reverse indexed field access
(args)     .(args)                                       call, get procedure
[indexes]                                                access index
?(on_true)(on_false)                                     conditional expression
#try(try_expression)(on_failrure)                        compile time try expression


SEPARATORS:
, is for:
	Call, GetProcedure, ProcedureType, ProcedureLiteral,
	ArrayLiteral, TupleLiteral, Initialization, IndexAccess,
	K_Assert, D_Assert,



^**^^*^*^Int -> ^*Void
I^*^*^^**^   -> V*^


^**^^*^*^Int -> ^*?
I^*^*^^**^   -> ?*^

^*Void -> ^**^^*^*^Int



if T {
} == Int {
	code 1;
} == F32 {
	code 2;
} else{
	code 3;
}



IMORTANT THINGS TO TAKE CARE OF:
- things that are imported from module are internally identified not by local module name
  but by name of the file that defines the module and module's parameters
  (which should be encoded as module id)

IMPLICIT CONVERSIONS:
generic enum     -> enum                                     
enum             -> unsigned                                 
unsigned         -> signed                                   X
unsigned         -> other unsigned                           X
signed           -> other signed                             X
Bool             -> unsigned                                 X
Bool             -> integer                                  X
64 bit float     -> 32 bit float                             X
fixed array      -> const span with the same element class   X
any class        -> const pointer to it                      X
empty tuple      -> any fully specified class
tuple            -> fixed array with matching classes        X
tuple            -> struct with matching classes

static span      -> fixed array                              x

any pointer      -> void pointer                             X
void pointer     -> any pointer
pointer          -> const pointer                            X
span             -> const span                               X

NESTED IMPLICIT CONVERSIONS:
any pointer      -> void pointer
void pointer     -> any pointer
pointer          -> const pointer
span             -> const span



BASIC CLASSES ORDERING:
I8
I16
I32
I64
U8
U16
U32
U64
Bool
Char
class
enum

is_trivially_default_copy_constr

BASIC CLASSES:
I8 I16 I32 I64
U8 U16 U32 U64
F32 F64
Bool Char
enum

BASIC INCOMPLETE CLASSES:
*        !*       ^        !^
[]       [!]      <>       <!>
[N]      [[N]]    [..]
struct   enum     bitfield expression

BASIC ALIASES:
Int, Num,
Iptr, Uptr,

INTEGRAL CLASS CONSTANTS:
Min, Max, Bits,
getbit, setbit
bitfloor, bitceil, bitwidth, popcount,
zerobits_l, zerobits_r, onebits_l, onebits_r,

FLOATIONG POINT CLASS FIELDS:
Min, Max, Epsilon, Inf, Qnan,
MantissaBits, ExponentBits, ExponentBias,
E, Pi, Sqrt2, Sqrt3, InvSqrt2, Ln2, Ln10, Log2

LIST OF OVERLOADABLE OPERATORS:
ASSIGN, ASSIGN_RVAL,
CAT_ASSIGN,
MOD_ASSIGN,
ADD_ASSIGN, SUB_ASSIGN, MADD_ASSIGN, MSUB_ASSIGN,
MUL_ASSIGN, DIV_ASSIGN, MMUL_ASSIGN, MDIV_ASSIGN,
POW_ASSIGN,
OR_ASSIGN, NOR_ASSIGN,
AND_ASSIGN, NAND_ASSIGN,
XOR_ASSIGN,
LSH_ASSIGN, RSH_ASSIGN, CLSH_ASSIGN, CRSH_ASSIGN,
EQ, NEQ, LES, GRE, LEQ, GEQ,
CONT, NCONT,
CAT,
MOD,
ADD, SUB, MADD, MSUB, FADD, FSUB,
MUL, DIV, MMUL, MDIV, FMUL, FDIV,
CROSS,
POW,
OR, NOR,
AND, NAND,
XOR,
LSH, RSH, CLSH, CRSH,
CAST,
NOT, MINUS,
INDEX, SLICE, LAST,
DEREF,


SOME IMAGINARY EXPRESSIONS USED FOR TESTING THE PARSER
(1 + 2) * 3 - -(4 / aaa);
[1,2,3,4,5+3,7] * 32 >> a;
f(1,2,3)(1,2)[23,3].arr.size.#non_trivial / 32;
x == 32 ? (-True * 1.f)  (*a' - 32 / []Int);
x == 32 ? (-True * 1.f)  (*a' - 32 / []Int{1,2*3 -a.arr[1,3], 8*7>>x});


x := {Int, Float};

x.1 = 32;
y.2 = 123;
x.3 = 456;

SANDBOX FOR INVENTING SYNTAX:

VTInterface :: class(VT :: Class){
	*VT data;
	
	#for {name, index} :: VT {
		// those are not varargs, the ... parameter's class cannot be infered from input
		(name) :: (vt : *VT, args... : VT.[index].Args) => vt.[index](args ...);
	}
};


DynArrayI :: class(T : Class){
	push_back : (*Void, ^T) -> Bool;
	pop_back : (*Void) -> T;
	__INDEX : (*Void) -> *T;
}

inteface_vtables := HashMap(Class, HashMap(Class, *Interface, class(__ALLOCATOR))){ __ALLOCATOR };

get_virtual_table(Interface :: Class, Arr :: Class) -> *Inteface {
	vtables = interface_vtables[Interface];
	assert vtables != Null;

	match := vtables[Arr];
	if match != Null return match';
	
	new_vtable : Interface;

	for {name, index} :: Interface {
		for fn, j :: Arr {
			if fn == name { new_vtable.[index] = Arr.[j]; break 2; } 
		}
	}

	vtables.add(Class, new_vtable);
}










